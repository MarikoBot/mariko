import { Snowflake, User } from 'discord.js';

import * as models from '../models';
import BaseServer from './BaseServer';
import Client from '../root/Client';
import { Language } from '../service/game/Typings';
import { caught } from '../root/Util';

/**
 * Represents an interface for the subscriptions list.
 */
export interface SubscriptionsData {
  /**
   * The total amount of money generated by the premium subs.
   */
  totalIncomes: number[];
  /**
   * Total subscribers.
   */
  subscribers: Record<Snowflake, { user: User | { id: Snowflake }; sub: models.User.Subscription }>;
  /**
   * The full list of subscriptions.
   */
  subscriptions: models.User.Subscription[];
}

/**
 * The user server.
 */
export default class UserServer extends BaseServer {
  /**
   * @param client The client instance.
   */
  constructor(client: Client) {
    super(client, models.User as any);
  }

  /**
   * Create a new user.
   * @param discordId The discord id.
   * @param language The language id.
   * @returns Nothing.
   */
  public async createUser(discordId: Snowflake, language: Language): Promise<void> {
    await this.create({
      discordId,
      language,
      date: Date.now(),
    });
  }

  /**
   * Extract the language id from a user.
   * @param discordId The user ID.
   * @returns The user id. Returns "en" if not found.
   */
  public async getLanguage(discordId: Snowflake): Promise<Language> {
    const data: {} = await this.find({ discordId });
    if (!data || !('language' in data)) return 'en';

    return data.language as Language;
  }

  /**
   * Get the list of all subscriptions from the server.
   * @returns The subscriptions data.
   */
  public async getSubsData(): Promise<SubscriptionsData> {
    const data: this['collectionData']['defaultData'][] = await this.collectionData.Model.find().exec();
    const subList: models.User.Subscription[] = data
      .filter((e: this['collectionData']['defaultData']) => e?.subscriptions)
      .map((e: this['collectionData']['defaultData']) => e?.subscriptions);

    const subData: SubscriptionsData = {
      totalIncomes: subList.map((e: models.User.Subscription) => e.price),
      subscribers: {},
      subscriptions: subList,
    };

    for (const user of data) {
      subData.subscribers[user.discordId] = {
        user: (await this.client.users.fetch(user.discordId).catch(caught)) || { id: user.discordId as Snowflake },
        sub: user.subscription,
      };
    }

    return subData;
  }
}
